name: check-version

on:
  workflow_call: # 다른 워크플로우에서 호출될 때 동작
    inputs:
      path: # 각 워크스페이스의 path를 파라미터로 받는다
        description: "The path where the version files are located"
        required: true
        type: string

jobs:
  CheckVersion:
    if: ${{ github.base_ref == 'master' }}
    runs-on: ubuntu-22.04
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Checkout Current Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Get current branch version
        id: current-branch-version
        run: |
          cd ${{ inputs.path }}
          echo "CURR_VERSION=$(grep -m1 version package.json | cut -d '"' -f 4)" >> $GITHUB_ENV
          echo "$(git branch --show-current)"

      - name: Checkout Master Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Get master branch version
        id: master-branch-version
        run: |
          if [ ! -d ${{ inputs.path }} ]; then
            echo "Module version is init"
            echo "MASTER_VERSION=none" >> $GITHUB_ENV
            echo "$(git branch --show-current)"
          else
            cd ${{ inputs.path }}
            echo "MASTER_VERSION=$(grep -m1 version package.json | cut -d '"' -f 4)" >> $GITHUB_ENV
            echo "$(git branch --show-current)"
          fi

      - name: Check version change
        id: version-changed
        run: |
          if [ "${{ env.MASTER_VERSION }}" == "none" ]; then
            if [ "${{ env.CURR_VERSION }}" == "1.0.0" ]; then
              echo "Init Version"
            else
              echo "Init Module's Version should be 1.0.0"
              exit 1
            fi
          else
            if [ "${{ env.MASTER_VERSION }}" != "${{ env.CURR_VERSION }}" ]; then
              cd ${{ inputs.path }}
              echo "Version changed"
              IFS='.' read -ra master_version_parts <<< "${{ env.MASTER_VERSION }}"
              master_major=${master_version_parts[0]}
              master_minor=${master_version_parts[1]}
              master_patch=${master_version_parts[2]}
              next_major="$((master_major+1)).0.0"
              next_minor="$((master_major)).$((master_minor+1)).0"
              next_patch="$((master_major)).$((master_minor)).$((master_patch+1))"
              if [ "$next_major" == "${{ env.CURR_VERSION }}" ] || [ "$next_minor" == "${{ env.CURR_VERSION }}" ] || [ "$next_patch" == "${{ env.CURR_VERSION }}" ]; then
                echo "Version changed ${{ env.MASTER_VERSION }} to ${{ env.CURR_VERSION }}"
              else
                echo "Version can't changed ${{ env.MASTER_VERSION }} to ${{ env.CURR_VERSION }}"
                exit 1
              fi
            else
              echo "Version not changed"
              exit 1
            fi
          fi
